version: '3.3'

services:
   surge:
      image: surge
      build:
        dockerfile: ./Dockerfile
        context: .
      container_name: surge
      restart: always
      env_file:
        - ./settings.env
      depends_on:
        - redis
        - postgres
      ports:
        - "8080:8000"
      command: ["uwsgi", "--callable", "application", "--wsgi-file", "./surge/wsgi.py", "--processes=2", "--protocol=http", "-b 32768" ,  "--wsgi-disable-file-wrapper", "--socket-timeout=120"]
      networks:
        - surge-network

   surge-cronjob:
      image: surge-cronjob
      build:
        dockerfile: ./Dockerfile
        context: .
      container_name: surge-cronjob
      restart: always
      env_file:
        - ./settings.env
      depends_on:
        - redis
        - postgres
      command: ["worker" , "-A" , "surge" , "worker" , "-B" , "--loglevel=debug"]
      networks:
        - surge-network

   postgres:
      image: "postgis/postgis:13-master"
      container_name: postgres
      env_file:
        - ./postgis.env
      ports:
        - "5444:5432"
      volumes:
        - postgres-data:/var/lib/postgresql/data/
      healthcheck:
          test: pg_isready -U $$POSTGRES_USER
          interval: 10s
          timeout: 5s
          retries: 5
      networks:
        - surge-network

   redis:
      image: "redis:alpine"
      container_name: redis
      command: redis-server
      ports:
         - "6389:6379"
      volumes:
         - redis-data:/data
      environment:
         - REDIS_REPLICATION_MODE=master
      networks:
         - surge-network

   ogr2ogr:
      image: ogr2ogr
      build:
         dockerfile: ./Dockerfile
         context: ./postgis-data
      container_name: ogr2ogr
      env_file:
         - ./postgis.env
      depends_on:
         postgres:
           condition: service_healthy
      command: bash -c "sleep 4; chmod +x /postgis-data/import-script.sh && /postgis-data/import-script.sh"
      volumes:
         - ./postgis-data:/postgis-data
      networks:
         - surge-network

   surge-migration:
      image: surge
      build:
        dockerfile: ./Dockerfile
        context: .
      container_name: surge-migration
      env_file:
        - ./settings.env
      depends_on:
         postgres:
            condition: service_healthy
      command: ["migrate"]
      networks:
        - surge-network
networks:
  surge-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
